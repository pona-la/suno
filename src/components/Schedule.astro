---

import eventsData from "./2025.json"; // Replace with your actual data source

interface Props {
  lang: "en" | "tok";
}

export interface EventData {
  duration: number;
  performer: string;
  title: string;
  categories: string[];
  language: string;
  description: string;
  stamp_start: number;
  stamp_end: number;
}

const { lang } = Astro.props;

const start = 1754717400;
const year = 2025;
const tracks = ["default"];
const track = "default";

// Filter events for this year
const yearEvents = eventsData as EventData[];
const totalMinutes = 144; // Matches Jekyll loop 0..143
---

<div class="schedule">
  <div class="events" style={`--tracks:${1}`}>
    <!-- <a href={`/${year}`} class="logo">
      <img src="/assets/sitelen/suno.png" alt="suno pi toki pona | day of toki pona" />
    </a> -->

    <!-- Timezone Display -->
    <div class="timezone">Timezone: <span id="timezone">UTC</span></div>
    <script>
      document.querySelector('#timezone')!.textContent =
        new Date().toLocaleTimeString('en-US', { timeZoneName: 'short' }).split(' ')[2];
    </script>

    <!-- Track Headers -->
    {tracks.map((track) => (
      <div class="track not-phone" style={`--track:${track}`}>{track}</div>
    ))}

    <!-- Time Slots -->
    {Array.from({ length: totalMinutes }).map((_, i) => {
      const time = start + i * 600;
      const endTime = time + 600;
      const formatted = new Date(time * 1000);
      return (
        <div id={`time-${time}`} class="minute not-phone" style={`--row-start:${(time - start) / 60}`}>
          <time datetime={formatted.toISOString()}>{formatted.toLocaleTimeString("en-us", {hour: "2-digit", minute: "2-digit", hour12: false})}</time>
        </div>
      );
    })}

    <!-- Events -->
    {yearEvents
      .filter((event) => event.performer !== "break")
      .map((event) => {
        const startRow = (event.stamp_start - start) / 60;
        const endRow = (event.stamp_end - start) / 60;
        // const trackIndex = tracks.findIndex((t) => t === event.track) + 1;
        const trackIndex = 2;
        const classNames = [
          "event-time",
          ...(new Set(event.categories).intersection(new Set(["entertainment", "informational", "music", "game"]))),
        ].join(" ");

        const href = `/${year}/tenpo/${track}/${event.stamp_start}/`;

        const startTime = new Date(event.stamp_start * 1000).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
        const endTime = new Date(event.stamp_end * 1000).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit", timeZoneName: "short" });

        return (
          <a
            id={`${track}-${startRow}`}
            class={classNames}
            style={`--row-start:${startRow}; --row-end:${endRow}; --track:${trackIndex}`}
            href={href}
          >
            <div class="time phone-only">{startTime} - {endTime}</div>
            {event.duration >= 20 && <div class="performer">{event.performer}</div>}
            <div class="title">
              <span class="live">LIVE</span>
              <!-- {event.track && <span class="track phone-only">{event.track}: </span>} -->
              {event.title.includes(" | ") ? event.title.split(" | ")[lang == "tok" ? 1 : 0] : event.title}
            </div>
            <!-- {event.duration >= 20 && (
              <ul class="categories">
                {event.categories.map((cat) => <li>{cat}</li>)}
              </ul>
            )} -->
          </a>
        );
      })}
  </div>
</div>

<script is:inline>
  // Highlight the current time and event dynamically
  const now = new Date();

  document.querySelectorAll("[id^='time-']").forEach((el) => {
    const time = parseInt(el.id.split('-')[1]);
    const endTime = time + 600;
    const diff = new Date(endTime * 1000).getTime() - now.getTime();

    if (diff > 0) {
      if (new Date(time * 1000).getTime() - now.getTime() <= 0) {
        el.classList.add("current");
        el.scrollIntoView({ behavior: "instant", block: "center" });
      } else {
        setTimeout(() => {
          el.classList.add("current");
          el.scrollIntoView({ behavior: "smooth", block: "center" });
        }, new Date(time * 1000).getTime() - now.getTime());
      }

      setTimeout(() => el.classList.remove("current"), diff);
    }
  });

  // document.querySelectorAll(".event-time").forEach((el) => {
  //   const [track, start] = el.id.split("-");
  //   const startTs = parseFloat(start) * 60 + {{start}};
  //   const event = el;
  //   const end = event.style.getPropertyValue("--row-end");

  //   // Could add similar dynamic class toggling logic if desired
  // });
</script>

<style>
:root {
  --font-size-h1: 3rem;
  --font-size-h2: 2.5rem;
  --font-size-h3: 2.25rem;
  --font-size-h4: 2rem;
  --font-size-x-large: 1.5rem;
  --font-size-large: 1.2rem;
  --font-size-medium: 16px;
  --font-size-small: 0.9rem;
  --font-size-x-small: 0.8rem;
  --line-height-default: 1.25;
  --line-height-comfortable: 1.5;
  --font-family-sans-serif: sans-serif;
  --font-family-monospace: monospace;
  --border-width: 1px;
  --page-padding: 2rem;
  --button-border-radius: 0.25rem;
  --button-padding: 0.375rem 0.75rem;
  --card-border-radius: 0.75rem;
  --card-padding: 0.5rem 1rem;
}
:root {
  --application-foreground-color: #fff;
  --application-background-color: #241f31;
  --application-border-color: 255, 255, 255;
  --secondary-foreground-color: #fff;
  --secondary-background-color: #3d3846;
  --secondary-border-color: #5e5c64;
  --focus-foreground-color: #fff;
  --focus-background-color: #4d2a68;
  --focus-border-color: #9141ac;
  --focus-link-text-color: #fff;
  --focus-title-text-color: #c0bfbc;
  --full-focus-background-color: #9141ac;
  --link-text-color: #dc8add;
  --blue-button-background-color: #1c71d8;
  --blue-button-foreground-color: #fff;
  --blue-button-border-color: #99c1f1;
  --red-button-background-color: #e01b24;
  --red-button-foreground-color: #fff;
  --red-button-border-color: #f66151;
}

.schedule {
  padding: 1rem;
}

.schedule .events {
  display: grid;
  grid-template-rows: min-content [header] repeat(1441, 1fr);
  grid-template-columns: min-content [minutes] repeat(var(--tracks), 1fr);
}

.schedule .events .logo {
  display: block;
  width: 5rem;
  padding: 0 1rem;
}

.schedule .events .logo img {
  max-width: 100%;
}

.schedule .events .timezone {
  opacity: 0.5;
  margin-top: 1.5rem;
}

.schedule .events .track {
  grid-column: var(--track) / span 1;
  align-content: end;
}

.schedule .events .event-time {
  display: block;
  padding: var(--card-padding);
  text-decoration: none;
  color: var(--focus-link-text-color);
  background-color: var(--focus-background-color);
  border: var(--border-width) solid var(--focus-border-color);
  border-radius: var(--button-border-radius);
  grid-row-start: calc(var(--row-start) + 2);
  grid-row-end: calc(var(--row-end) + 2);
  grid-column: var(--track) / span 1;
  margin: 0 1rem 0.5rem 0;
}

.schedule .events .event-time.entertainment {
  background-color: light-dark(#f0bd0b, #d17005);
  border-color: light-dark(#f5c211, #f5c211);
}

.schedule .events .event-time.informational {
  background-color: light-dark(#2ea1f4, #144ca4);
  border-color: light-dark(#1c71d8, #1c71d8);
}

.schedule .events .event-time.game {
  background-color: light-dark(#2ecc86, #167a44);
  border-color: light-dark(#2ec27e, #2ec27e);
}

.schedule .events .event-time.music {
  background-color: light-dark(#fc8600, #b83500);
  border-color: light-dark(#e66100, #e66100);
}

.schedule .events .event-time.current {
  border-color: red;
}

.schedule .events .event-time .live {
  display: none;
}

.schedule .events .event-time.current .live {
  display: unset;
  color: red;
}

.schedule .events .minute {
  grid-row-start: calc(var(--row-start) + 2);
  grid-row-end: span 10;
  border-top: var(--border-width) solid var(--focus-border-color);
  opacity: 50%;
  text-align: end;
  padding: var(--card-padding);
}

.schedule .events .minute.current {
  border-color: red;
  color: red;
}

.schedule .events .event-time .title {
  font-weight: 700;
  margin-bottom: 0.2rem;
}

.schedule .events .event-time .performer {
  font-size: var(--font-size-x-small);
}

.phone-only { display: none; }
.not-phone { display: unset; }

@media (max-width: 700px) {
  .phone-only { display: unset; }
  .not-phone { display: none; }
  .schedule .events {
    display: block;
  }
  .schedule .events .timezone {
    display: none;
  }
}




</style>
